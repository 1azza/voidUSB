#!/bin/bash
grn="\e[0;32m"
def="\e[0m"

echo -e "${grn}Welcome to voidUSB!"
if [ "$1" != "chroot" ]; then
		source voidusb.conf
		if [ $_conf = false ]; then
				echo -e "${def}To start off, edit the voidusb.conf file to your liking."
				exit 0
		fi
fi

function usbchk {
		file -s "${_device}1" > .voidusb #i cannot get bash to get it to work while set as a variable
		file -s "${_device}2" >> .voidusb #an additional check for partition 2 just to be sure
		stat=$(cat .voidusb)
		if [[ $stat = *"no read permission"* ]]; then
				echo -e "${grn}Device $_device contains data. Is this the correct device?"
				rm .voidusb
				exit 0
		fi
		rm .voidusb
}

function partition {
		echo 'label: gpt' | sudo sfdisk -q $_device
		echo '${_device}1: start=2048, size=262144, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B,bootable, name="EFI"' >> .voidusb #EFI boot partition
		echo '${_device}2: start=264192, size=786432, type=L, name="Boot"' >> .voidusb #boot partition as grub does not like f2fs with compression
		echo '${_device}3: start=1050624,type=L, name="Root"' >> .voidusb #rest as /
		sudo sfdisk -q $_device < .voidusb #i think this is the only way sfdisk works
		rm .voidusb
		sudo mkfs.fat -F32 ${_device}1
		sudo mkfs.ext4 -F -q ${_device}2
		sudo mkfs.f2fs -f -q -O extra_attr,inode_checksum,sb_checksum,compression ${_device}3 #https://wiki.archlinux.org/title/F2FS#Compression, will give us a performance increase and reduce wear on the USB
}

function tarstrap { #anyone want to add an option to install via XBPS for people who can install xbps?
		mkdir -p void
		sudo mount -o compress_algorithm=zstd:9,compress_chksum,whint_mode=fs-based,atgc,gc_merge,lazytime ${_device}3 ./void
		sudo mkdir -p ./void/boot
		sudo mount ${_device}2 ./void/boot
		sudo mkdir -p ./void/boot/efi
		sudo mount ${_device}1 ./void/boot/efi
		#install void via rootfs
		if [ $_libc = glibc ]; then
				tarname=void-x86_64-ROOTFS-20210930.tar.xz
		else #select musl if glibc is not selected
				tarname=void-x86_64-musl-ROOTFS-20210930.tar.xz
		fi
		echo -e "${grn}Downloading Void ROOTFS...${def}" && cd void
		sudo curl -O https://alpha.de.repo.voidlinux.org/live/current/$tarname
		sudo tar xpf $tarname --xattrs-include='*.*' --numeric-owner #https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Unpacking_the_stage_tarball
		sudo rm $tarname
}

function prepchroot {
		sudo cp --dereference /etc/resolv.conf ./etc
		sudo mount --types proc /proc ./proc
		sudo mount --rbind /sys ./sys
		sudo mount --rbind /dev ./dev
		sudo cp ../voidusb ./tmp/voidusb
}

if [ "$1" = "chroot" ]; then
		#stuff in chroot
		exit 0
else
		usbchk
		echo -e "${grn}Partitioning USB... Password prompt incoming!${def}"
		partition
		echo -e "${grn}Partitions prepared."
		echo -e "Preparing devices... Password prompt incoming!${def}"
		tarstrap
		echo -e "${grn}Entering a chroot... Password prompt incoming!${def}"
		prepchroot
		echo -e "${grn}Stage 1 complete, relaunching script in chroot mode...${def}"
		sudo chroot ./ ./tmp/voidusb chroot
fi
