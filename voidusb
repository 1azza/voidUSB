#!/bin/bash
grn="\e[0;32m"
def="\e[0m"

source voidusb.conf
if [ "$1" != "chroot" ]; then
		echo -e "${grn}Welcome to voidUSB!"
		if [ $_conf = false ]; then
				echo -e "${def}To start off, edit the voidusb.conf file to your liking."
				exit 0
		fi
fi

function usbchk {
		file -s "${_device}1" > .voidusb #i cannot get bash to get it to work while set as a variable
		file -s "${_device}2" >> .voidusb #an additional check for partition 2 just to be sure
		stat=$(cat .voidusb)
		if [[ $stat = *"no read permission"* ]]; then
				echo -e "${grn}Device $_device contains data. Is this the correct device?"
				rm .voidusb
				exit 0
		fi
		rm .voidusb
}

function partition {
		echo 'label: gpt' | sudo sfdisk -q $_device
		echo '${_device}1: start=2048, size=262144, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B,bootable, name="EFI"' >> .voidusb #EFI boot partition
		echo '${_device}2: start=264192, size=786432, type=L, name="Boot"' >> .voidusb #boot partition as grub does not like f2fs with compression
		echo '${_device}3: start=1050624,type=L, name="Root"' >> .voidusb #rest as /
		sudo sfdisk -q $_device < .voidusb #i think this is the only way sfdisk works
		rm .voidusb
		sudo mkfs.fat -F32 ${_device}1
		sudo mkfs.ext4 -F -q ${_device}2
		sudo mkfs.f2fs -f -q -O extra_attr,inode_checksum,sb_checksum,compression ${_device}3 #https://wiki.archlinux.org/title/F2FS#Compression, will give us a performance increase and reduce wear on the USB
}

function tarstrap { #anyone want to add an option to install via XBPS for people who can install xbps?
		mkdir -p void
		sudo mount -o compress_algorithm=zstd:9,compress_chksum,whint_mode=fs-based,atgc,gc_merge,lazytime ${_device}3 ./void
		sudo mkdir -p ./void/boot
		sudo mount ${_device}2 ./void/boot
		sudo mkdir -p ./void/boot/efi
		sudo mount ${_device}1 ./void/boot/efi
		#install void via rootfs
		if [ $_libc = glibc ]; then
				tarname=void-x86_64-ROOTFS-20210930.tar.xz
		else #select musl if glibc is not selected
				tarname=void-x86_64-musl-ROOTFS-20210930.tar.xz
		fi
		echo -e "${grn}Downloading Void ROOTFS...${def}" && cd void
		sudo curl -O https://alpha.de.repo.voidlinux.org/live/current/$tarname
		sudo tar xpf $tarname --xattrs-include='*.*' --numeric-owner #https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Unpacking_the_stage_tarball
		sudo rm $tarname
}

function prepchroot {
		sudo cp --dereference /etc/resolv.conf ./etc
		sudo mount --types proc /proc ./proc
		sudo mount --rbind /sys ./sys
		sudo mount --rbind /dev ./dev
		sudo cp ../voidusb ./tmp/voidusb
		sudo cp ../voidusb.conf ./tmp/voidusb.conf
}

function tarchroot { #want this separate in case of XBPS install method
		xbps-install -y -Su xbps
		xbps-install -y -u
		xbps-install -y base-system
		xbps-remove -y base-voidstrap
}

function localisation {
		if [ "$_libc" = "glibc" ]; then #locale setup
				echo "${_locale}.UTF-8 UTF-8" >> /etc/default/libc-locales
				xbps-reconfigure -f glibc-locales
		fi
		echo $_hostname > /etc/hostname
		echo "LANG=${_locale}.UTF-8" > /etc/locale.conf #idk if this has an effect on musl but eh
		ln -sf /usr/share/zoneinfo/$timez /etc/localtime
		if [ "$_clock" = "NTP" ]; then
				echo "HARDWARECLOCK=localtime" >> /etc/rc.conf #as a backup
				xbps-install -y openntpd
				ln -s /etc/sv/ntpd /var/service
		elif [ "$_clock" = "localtime" ]; then
				echo "HARDWARECLOCK=localtime" >> /etc/rc.conf
		fi
}

function bootloader {
		xbps-install -y grub-x86_64-efi
		grub-install --target=x86_64-efi --boot-directory=/boot --efi-directory=/boot/efi --removable --bootloader-id="voidUSB"
		grub-mkconfg -o /boot/grub/grub.cfg
}

function servicesetup {
		ln -s /etc/sv/dbus /var/service
		ln -s /etc/sv/dhcpcd /var/service
		ln -s /etc/sv/sulogin /var/service
		#can't think of any others
}

if [ "$1" = "chroot" ]; then
		echo -e "${grn}Chroot entered!, seting up system.${def}"
		tarchroot
		localisation
		bootloader
		xbps-install -y $_pkgs
		echo -e "${grn}Setup complete, voidUSB has been successfully installed on ${_device}!${def}"
else
		usbchk
		echo -e "${grn}Partitioning USB... Password prompt incoming!${def}"
		partition
		echo -e "${grn}Partitions prepared."
		echo -e "Preparing devices... Password prompt incoming!${def}"
		tarstrap
		echo -e "${grn}Entering a chroot... Password prompt incoming!${def}"
		prepchroot
		echo -e "${grn}Stage 1 complete, relaunching script in chroot mode...${def}"
		sudo chroot ./ ./tmp/voidusb chroot
fi
